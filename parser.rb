#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 161)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    -1,    32,     4,    61,     9,    11,    35,    14,    16,    19,
    22,     1,     2,     5,    24,    46,    34,    57,    48,    49,
    25,    49,    -5,    50,     4,     7,     9,    11,    -5,    14,
    16,    19,    22,     1,     2,     5,    66,    -5,    -5,    46,
    67,    63,    58,     4,    64,     9,    11,     7,    14,    16,
    19,    22,     1,     2,     5,    53,    37,    38,    39,    40,
    42,    31,     4,    36,     9,    11,     7,    14,    16,    19,
    22,     1,     2,     5,    30,    37,    38,    39,    40,    42,
    27,     4,    36,     9,    11,     7,    14,    16,    19,    22,
     1,     2,     5,    46,    37,    38,    39,    40,    42,    46,
     4,    36,     9,    11,     7,    14,    16,    19,    22,     1,
     2,     5,    71,    37,    38,    39,    40,    42,    55,     4,
    36,     9,    11,     7,    14,    16,    19,    22,     1,     2,
     5,   nil,    37,    38,    39,    40,    42,   nil,     4,    36,
     9,    11,     7,    14,    16,    19,    22,     1,     2,     5,
   nil,    37,    38,    39,    40,    42,   nil,     4,    36,     9,
    11,     7,    14,    16,    19,    22,     1,     2,     5,   nil,
    37,    38,    39,    40,    42,   nil,     4,    36,     9,    11,
     7,    14,    16,    19,    22,     1,     2,     5,    72,   nil,
   nil,   nil,    49,   nil,   nil,     4,   nil,     9,    11,     7,
    14,    16,    19,    22,     1,     2,     5,    35,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    65,    34,     7,    46,
   nil,   nil,    37,    38,    39,    40,    42,   nil,   nil,    36 ]

racc_action_check = [
     0,    18,     0,    50,     0,     0,    21,     0,     0,     0,
     0,     0,     0,     0,     2,    30,    21,    43,    28,    28,
     2,    43,    33,    30,    33,     0,    33,    33,    33,    33,
    33,    33,    33,    33,    33,    33,    62,    33,    33,    31,
    62,    55,    45,     4,    58,     4,     4,    33,     4,     4,
     4,     4,     4,     4,     4,    32,    60,    60,    60,    60,
    60,    11,    63,    60,    63,    63,     4,    63,    63,    63,
    63,    63,    63,    63,     9,    56,    56,    56,    56,    56,
     5,     7,    56,     7,     7,    63,     7,     7,     7,     7,
     7,     7,     7,    64,    54,    54,    54,    54,    54,    66,
    46,    54,    46,    46,     7,    46,    46,    46,    46,    46,
    46,    46,    67,    23,    23,    23,    23,    23,    36,    41,
    23,    41,    41,    46,    41,    41,    41,    41,    41,    41,
    41,   nil,    29,    29,    29,    29,    29,   nil,    24,    29,
    24,    24,    41,    24,    24,    24,    24,    24,    24,    24,
   nil,    44,    44,    44,    44,    44,   nil,    25,    44,    25,
    25,    24,    25,    25,    25,    25,    25,    25,    25,   nil,
    47,    47,    47,    47,    47,   nil,    49,    47,    49,    49,
    25,    49,    49,    49,    49,    49,    49,    49,    68,   nil,
   nil,   nil,    68,   nil,   nil,    27,   nil,    27,    27,    49,
    27,    27,    27,    27,    27,    27,    27,    59,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    59,    59,    27,    26,
   nil,   nil,    26,    26,    26,    26,    26,   nil,   nil,    26 ]

racc_action_pointer = [
     0,   nil,    -8,   nil,    41,    52,   nil,    79,   nil,    62,
   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,
   nil,     0,   nil,    96,   136,   155,   205,   193,    -8,   115,
     1,    25,    55,    22,   nil,   nil,   106,   nil,   nil,   nil,
   nil,   117,   nil,    -6,   134,    36,    98,   153,   nil,   174,
    -9,   nil,   nil,   nil,    77,    19,    58,   nil,    41,   201,
    39,   nil,    13,    60,    79,   nil,    85,   100,   165,   nil,
   nil,   nil,   nil ]

racc_action_default = [
   -32,   -21,   -27,    -6,   -32,   -37,    -7,   -32,    -8,   -49,
    -9,   -49,   -10,   -11,   -17,   -12,   -18,   -13,   -49,   -19,
   -14,    -2,   -20,    -3,   -32,   -32,   -49,   -32,   -49,   -35,
   -49,   -49,   -49,   -32,   -16,   -15,   -49,   -22,   -23,   -24,
   -25,   -32,   -26,   -49,   -38,   -46,   -32,   -39,   -33,   -32,
   -42,   -40,   -45,    73,    -4,   -29,   -31,   -28,   -49,   -49,
   -36,   -43,   -49,   -32,   -49,   -48,   -49,   -49,   -49,   -47,
   -41,   -44,   -30 ]

racc_goto_table = [
    28,    23,    21,    45,    18,    26,    62,    51,    52,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,    47,   nil,
   nil,   nil,   nil,   nil,    54,   nil,   nil,   nil,   nil,   nil,
   nil,    69,    56,    70,   nil,   nil,   nil,    23,    59,   nil,
    60,   nil,   nil,   nil,   nil,   nil,    68 ]

racc_goto_check = [
    15,     3,     2,    16,     1,     3,    17,    16,    16,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,   nil,
   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,
   nil,    16,     3,    16,   nil,   nil,   nil,     3,     2,   nil,
     3,   nil,   nil,   nil,   nil,   nil,    15 ]

racc_goto_pointer = [
   nil,     4,     2,     1,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    -7,   -23,   -44 ]

racc_goto_default = [
   nil,   nil,   nil,    29,    33,     3,     6,     8,    10,    12,
    13,    15,    17,    20,    41,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 30, :_reduce_1,
  1, 30, :_reduce_2,
  1, 31, :_reduce_3,
  3, 31, :_reduce_4,
  2, 31, :_reduce_5,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  1, 34, :_reduce_17,
  1, 34, :_reduce_18,
  1, 34, :_reduce_19,
  1, 34, :_reduce_20,
  1, 34, :_reduce_21,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 36, :_reduce_27,
  4, 35, :_reduce_28,
  3, 35, :_reduce_29,
  6, 35, :_reduce_30,
  3, 35, :_reduce_31,
  0, 42, :_reduce_none,
  3, 42, :_reduce_33,
  0, 44, :_reduce_34,
  1, 44, :_reduce_35,
  3, 44, :_reduce_36,
  1, 37, :_reduce_37,
  3, 38, :_reduce_38,
  3, 38, :_reduce_39,
  3, 39, :_reduce_40,
  6, 39, :_reduce_41,
  0, 46, :_reduce_42,
  1, 46, :_reduce_43,
  3, 46, :_reduce_44,
  3, 40, :_reduce_45,
  3, 41, :_reduce_46,
  6, 41, :_reduce_47,
  3, 45, :_reduce_48 ]

racc_reduce_n = 49

racc_shift_n = 73

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :DEF => 4,
  :CLASS => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :INDENT => 14,
  :DEDENT => 15,
  ";" => 16,
  "+" => 17,
  "-" => 18,
  "*" => 19,
  "/" => 20,
  "%" => 21,
  "(" => 22,
  ")" => 23,
  "." => 24,
  "[" => 25,
  "]" => 26,
  "," => 27,
  "=" => 28 }

racc_nt_base = 29

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\";\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"(\"",
  "\")\"",
  "\".\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "\"=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Var",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "Array",
  "BinaryOperator",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_17(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_18(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_19(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_20(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_21(val, _values, result)
     result = LiteralNode.new(nil) 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_27(val, _values, result)
     result = VarNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_28(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_29(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_30(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_31(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_33(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_34(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_35(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_36(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_37(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_38(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_39(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_40(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_41(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_42(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_43(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_44(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_45(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_46(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_47(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_48(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
