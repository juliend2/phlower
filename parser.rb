#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 155)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,    56,     9,    11,    42,    15,    17,    19,    20,     1,
     3,     6,     5,    58,     9,    11,    28,    15,    17,    19,
    20,     1,     3,     6,     5,    27,     9,    11,    48,    15,
    17,    19,    20,     1,     3,     6,     5,    61,     9,    11,
    55,    15,    17,    19,    20,     1,     3,     6,     5,    25,
     9,    11,    50,    15,    17,    19,    20,     1,     3,     6,
     5,    42,     9,    11,    42,    15,    17,    19,    20,     1,
     3,     6,     5,    67,     9,    11,    26,    15,    17,    19,
    20,     1,     3,     6,     5,   nil,     9,    11,   nil,    15,
    17,    19,    20,     1,     3,     6,     5,   nil,     9,    11,
   nil,    15,    17,    19,    20,     1,     3,     6,     5,   nil,
     9,    11,    30,    15,    17,    19,    20,     1,     3,     6,
    42,    60,    29,    33,    35,    36,    37,    38,    30,    42,
    32,   nil,    33,    35,    36,    37,    38,    45,    29,    32,
    33,    35,    36,    37,    38,   nil,   nil,    32,    33,    35,
    36,    37,    38,   nil,   nil,    32,    33,    35,    36,    37,
    38,   nil,   nil,    32,    33,    35,    36,    37,    38,   nil,
   nil,    32,    33,    35,    36,    37,    38,   nil,   nil,    32,
    33,    35,    36,    37,    38,    22,    52,    32,    53,    23,
    62,    68,    63,    53 ]

racc_action_check = [
     0,    45,     0,     0,    27,     0,     0,     0,     0,     0,
     0,     0,    34,    50,    34,    34,    14,    34,    34,    34,
    34,    34,    34,    34,     5,    11,     5,     5,    28,     5,
     5,     5,     5,     5,     5,     5,    58,    55,    58,    58,
    43,    58,    58,    58,    58,    58,    58,    58,    42,     6,
    42,    42,    32,    42,    42,    42,    42,    42,    42,    42,
    53,    61,    53,    53,    62,    53,    53,    53,    53,    53,
    53,    53,    31,    63,    31,    31,     9,    31,    31,    31,
    31,    31,    31,    31,    25,   nil,    25,    25,   nil,    25,
    25,    25,    25,    25,    25,    25,    22,   nil,    22,    22,
   nil,    22,    22,    22,    22,    22,    22,    22,    23,   nil,
    23,    23,    54,    23,    23,    23,    23,    23,    23,    23,
    24,    54,    54,    24,    24,    24,    24,    24,    16,    26,
    24,   nil,    44,    44,    44,    44,    44,    26,    16,    44,
    49,    49,    49,    49,    49,   nil,   nil,    49,    51,    51,
    51,    51,    51,   nil,   nil,    51,    18,    18,    18,    18,
    18,   nil,   nil,    18,    59,    59,    59,    59,    59,   nil,
   nil,    59,    41,    41,    41,    41,    41,   nil,   nil,    41,
    39,    39,    39,    39,    39,     3,    40,    39,    40,     3,
    57,    64,    57,    64 ]

racc_action_pointer = [
    -2,   nil,   nil,   163,   nil,    22,    23,   nil,   nil,    64,
   nil,    12,   nil,   nil,    16,   nil,   122,   nil,   139,   nil,
   nil,   nil,    94,   106,   106,    82,   115,   -10,    28,   nil,
   nil,    70,    40,   nil,    10,   nil,   nil,   nil,   nil,   163,
   163,   155,    46,    34,   115,   -11,   nil,   nil,   nil,   123,
    -9,   131,   nil,    58,   106,    34,   nil,   167,    34,   147,
   nil,    47,    50,    61,   168,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -20,    -7,   -26,    -8,   -46,   -34,    -9,   -10,   -46,
   -11,   -46,   -12,   -13,   -46,   -16,    -2,   -17,    -3,   -18,
   -19,    -6,   -31,   -46,   -46,   -46,   -46,   -46,   -46,   -15,
   -14,    -5,   -46,   -21,   -46,   -22,   -23,   -24,   -25,   -32,
   -46,   -35,   -46,   -43,   -36,   -39,   -37,   -42,    69,    -4,
   -28,   -30,   -27,   -46,   -46,   -46,   -40,   -46,   -31,   -33,
   -45,   -46,   -46,   -46,   -46,   -44,   -38,   -41,   -29 ]

racc_goto_table = [
    24,    16,    43,    14,    46,    47,    40,    57,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    41,   nil,
    44,   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,    51,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,
    66,   nil,    64,    54,   nil,   nil,   nil,   nil,    59,   nil,
   nil,   nil,   nil,    39 ]

racc_goto_check = [
     3,     2,    15,     1,    15,    15,    14,    16,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,     3,   nil,
     3,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
    15,   nil,    14,     2,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     3,     1,    -5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -16,   -22,   -38 ]

racc_goto_default = [
   nil,   nil,   nil,    18,    31,    21,     2,     4,     7,     8,
    10,    12,    13,    34,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 28, :_reduce_1,
  1, 28, :_reduce_2,
  1, 29, :_reduce_3,
  3, 29, :_reduce_4,
  2, 29, :_reduce_5,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 32, :_reduce_16,
  1, 32, :_reduce_17,
  1, 32, :_reduce_18,
  1, 32, :_reduce_19,
  1, 32, :_reduce_20,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 34, :_reduce_26,
  4, 33, :_reduce_27,
  3, 33, :_reduce_28,
  6, 33, :_reduce_29,
  3, 33, :_reduce_30,
  0, 41, :_reduce_31,
  1, 41, :_reduce_32,
  3, 41, :_reduce_33,
  1, 35, :_reduce_34,
  3, 36, :_reduce_35,
  3, 36, :_reduce_36,
  3, 37, :_reduce_37,
  6, 37, :_reduce_38,
  0, 43, :_reduce_39,
  1, 43, :_reduce_40,
  3, 43, :_reduce_41,
  3, 38, :_reduce_42,
  3, 39, :_reduce_43,
  6, 39, :_reduce_44,
  3, 42, :_reduce_45 ]

racc_reduce_n = 46

racc_shift_n = 69

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :DEF => 4,
  :CLASS => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :INDENT => 14,
  :DEDENT => 15,
  ";" => 16,
  "+" => 17,
  "-" => 18,
  "*" => 19,
  "/" => 20,
  "%" => 21,
  "(" => 22,
  ")" => 23,
  "." => 24,
  "," => 25,
  "=" => 26 }

racc_nt_base = 27

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\";\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"(\"",
  "\")\"",
  "\".\"",
  "\",\"",
  "\"=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Var",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "BinaryOperator",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_16(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_17(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_18(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_19(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_20(val, _values, result)
     result = LiteralNode.new(nil) 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_26(val, _values, result)
     result = VarNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_27(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_29(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_30(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_32(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_33(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_34(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_35(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_36(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_37(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_38(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_39(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_40(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_41(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_42(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_43(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_44(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_45(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
