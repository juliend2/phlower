#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 170)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    -1,    46,     4,    32,     9,    11,    35,    14,    16,    19,
    22,     1,     2,     5,    24,    69,    34,    57,    53,    76,
    25,    49,    -5,    49,     4,     7,     9,    11,    -5,    14,
    16,    19,    22,     1,     2,     5,    46,    -5,    -5,    48,
    49,    68,    55,     4,    50,     9,    11,     7,    14,    16,
    19,    22,     1,     2,     5,    31,    37,    38,    39,    40,
    42,    62,     4,    36,     9,    11,     7,    14,    16,    19,
    22,     1,     2,     5,    30,    37,    38,    39,    40,    42,
    46,     4,    36,     9,    11,     7,    14,    16,    19,    22,
     1,     2,     5,    46,    37,    38,    39,    40,    42,    75,
     4,    36,     9,    11,     7,    14,    16,    19,    22,     1,
     2,     5,    59,    37,    38,    39,    40,    42,    27,     4,
    36,     9,    11,     7,    14,    16,    19,    22,     1,     2,
     5,   nil,    37,    38,    39,    40,    42,   nil,     4,    36,
     9,    11,     7,    14,    16,    19,    22,     1,     2,     5,
    70,   nil,   nil,   nil,    71,   nil,   nil,     4,   nil,     9,
    11,     7,    14,    16,    19,    22,     1,     2,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,     9,    11,
     7,    14,    16,    19,    22,     1,     2,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     4,   nil,     9,    11,     7,
    14,    16,    19,    22,     1,     2,     5,    35,   nil,    35,
   nil,   nil,   nil,   nil,   nil,   nil,    35,    34,     7,    34,
    37,    38,    39,    40,    42,    35,    34,    36,   nil,   nil,
   nil,   nil,    65,   nil,   nil,    34,    37,    38,    39,    40,
    42,    46,    35,    36,    37,    38,    39,    40,    42,    35,
   nil,    36,    34,   nil,   nil,   nil,   nil,   nil,   nil,    34 ]

racc_action_check = [
     0,    31,     0,    18,     0,     0,    60,     0,     0,     0,
     0,     0,     0,     0,     2,    60,    60,    43,    32,    72,
     2,    43,    33,    72,    33,     0,    33,    33,    33,    33,
    33,    33,    33,    33,    33,    33,    30,    33,    33,    28,
    28,    59,    36,    46,    30,    46,    46,    33,    46,    46,
    46,    46,    46,    46,    46,    11,    54,    54,    54,    54,
    54,    50,    49,    54,    49,    49,    46,    49,    49,    49,
    49,    49,    49,    49,     9,    61,    61,    61,    61,    61,
    68,     7,    61,     7,     7,    49,     7,     7,     7,     7,
     7,     7,     7,    70,    47,    47,    47,    47,    47,    71,
     4,    47,     4,     4,     7,     4,     4,     4,     4,     4,
     4,     4,    45,    29,    29,    29,    29,    29,     5,    24,
    29,    24,    24,     4,    24,    24,    24,    24,    24,    24,
    24,   nil,    23,    23,    23,    23,    23,   nil,    65,    23,
    65,    65,    24,    65,    65,    65,    65,    65,    65,    65,
    63,   nil,   nil,   nil,    63,   nil,   nil,    27,   nil,    27,
    27,    65,    27,    27,    27,    27,    27,    27,    27,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,    25,    25,
    27,    25,    25,    25,    25,    25,    25,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    41,   nil,    41,    41,    25,
    41,    41,    41,    41,    41,    41,    41,    76,   nil,    44,
   nil,   nil,   nil,   nil,   nil,   nil,    55,    76,    41,    44,
    44,    44,    44,    44,    44,    56,    55,    44,   nil,   nil,
   nil,   nil,    55,   nil,   nil,    56,    56,    56,    56,    56,
    56,    26,    57,    56,    26,    26,    26,    26,    26,    21,
   nil,    26,    57,   nil,   nil,   nil,   nil,   nil,   nil,    21 ]

racc_action_pointer = [
     0,   nil,    -8,   nil,    98,    90,   nil,    79,   nil,    62,
   nil,    42,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   243,   nil,   115,   117,   174,   227,   155,    13,    96,
    22,   -13,    18,    22,   nil,   nil,    30,   nil,   nil,   nil,
   nil,   193,   nil,    -6,   203,   106,    41,    77,   nil,    60,
    49,   nil,   nil,   nil,    39,   210,   219,   236,   nil,    38,
     0,    58,   nil,   127,   nil,   136,   nil,   nil,    66,   nil,
    79,    87,    -4,   nil,   nil,   nil,   201,   nil ]

racc_action_default = [
   -36,   -21,   -27,    -6,   -36,   -41,    -7,   -36,    -8,   -54,
    -9,   -54,   -10,   -11,   -17,   -12,   -18,   -13,   -54,   -19,
   -14,    -2,   -20,    -3,   -36,   -36,   -54,   -36,   -54,   -39,
   -54,   -54,   -54,   -36,   -16,   -15,   -54,   -22,   -23,   -24,
   -25,   -36,   -26,   -54,   -42,   -51,   -36,   -44,   -37,   -36,
   -47,   -45,   -50,    78,    -4,   -29,   -31,   -28,   -43,   -54,
   -54,   -40,   -48,   -54,   -33,   -36,   -35,   -32,   -54,   -53,
   -54,   -54,   -54,   -52,   -46,   -49,   -30,   -34 ]

racc_goto_table = [
    28,    23,    21,    58,    18,    26,    63,    45,   nil,   nil,
   nil,    51,    52,   nil,    64,    66,    67,    43,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,    47,   nil,
   nil,   nil,   nil,   nil,    54,    77,   nil,   nil,   nil,   nil,
   nil,   nil,    56,   nil,   nil,   nil,   nil,    23,    60,    73,
    61,    74,   nil,   nil,   nil,   nil,   nil,   nil,    72 ]

racc_goto_check = [
    15,     3,     2,     4,     1,     3,    17,    16,   nil,   nil,
   nil,    16,    16,   nil,     4,     4,     4,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,   nil,
   nil,   nil,   nil,   nil,     3,     4,   nil,   nil,   nil,   nil,
   nil,   nil,     3,   nil,   nil,   nil,   nil,     3,     2,    16,
     3,    16,   nil,   nil,   nil,   nil,   nil,   nil,    15 ]

racc_goto_pointer = [
   nil,     4,     2,     1,   -41,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    -7,   -19,   -44 ]

racc_goto_default = [
   nil,   nil,   nil,    29,    33,     3,     6,     8,    10,    12,
    13,    15,    17,    20,    41,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 30, :_reduce_1,
  1, 30, :_reduce_2,
  1, 31, :_reduce_3,
  3, 31, :_reduce_4,
  2, 31, :_reduce_5,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  1, 34, :_reduce_17,
  1, 34, :_reduce_18,
  1, 34, :_reduce_19,
  1, 34, :_reduce_20,
  1, 34, :_reduce_21,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 36, :_reduce_27,
  4, 35, :_reduce_28,
  3, 35, :_reduce_29,
  6, 35, :_reduce_30,
  3, 35, :_reduce_31,
  5, 35, :_reduce_32,
  4, 35, :_reduce_33,
  7, 35, :_reduce_34,
  4, 35, :_reduce_35,
  0, 42, :_reduce_none,
  3, 42, :_reduce_37,
  0, 44, :_reduce_38,
  1, 44, :_reduce_39,
  3, 44, :_reduce_40,
  1, 37, :_reduce_41,
  3, 38, :_reduce_42,
  4, 38, :_reduce_43,
  3, 38, :_reduce_44,
  3, 39, :_reduce_45,
  6, 39, :_reduce_46,
  0, 46, :_reduce_47,
  1, 46, :_reduce_48,
  3, 46, :_reduce_49,
  3, 40, :_reduce_50,
  3, 41, :_reduce_51,
  6, 41, :_reduce_52,
  3, 45, :_reduce_53 ]

racc_reduce_n = 54

racc_shift_n = 78

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :DEF => 4,
  :CLASS => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :INDENT => 14,
  :DEDENT => 15,
  ";" => 16,
  "+" => 17,
  "-" => 18,
  "*" => 19,
  "/" => 20,
  "%" => 21,
  "(" => 22,
  ")" => 23,
  "." => 24,
  "[" => 25,
  "]" => 26,
  "," => 27,
  "=" => 28 }

racc_nt_base = 29

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\";\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"(\"",
  "\")\"",
  "\".\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "\"=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Var",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "Array",
  "BinaryOperator",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_17(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_18(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_19(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_20(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_21(val, _values, result)
     result = LiteralNode.new(nil) 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_27(val, _values, result)
     result = VarNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_28(val, _values, result)
     result = CallNode.new(nil, val[0], val[2], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_29(val, _values, result)
     result = CallNode.new(val[0], val[2], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_30(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_31(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_32(val, _values, result)
     result = CallNode.new(nil, val[0], val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_33(val, _values, result)
     result = CallNode.new(val[0], val[2], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]], true) 
    result
  end
.,.,

# reduce 36 omitted

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_37(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_38(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_39(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_40(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_41(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_42(val, _values, result)
     result = SetLocalNode.new(val[0], val[2], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_43(val, _values, result)
     result = SetLocalNode.new(val[0], val[2], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_44(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_45(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_46(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_47(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_48(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_49(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_50(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_51(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_52(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_53(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
