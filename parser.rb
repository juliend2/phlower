#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 147)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,    52,     9,    11,    38,    13,    15,    17,    19,     1,
     3,     6,     5,    41,     9,    11,    54,    13,    15,    17,
    19,     1,     3,     6,     5,    30,     9,    11,    47,    13,
    15,    17,    19,     1,     3,     6,     5,    57,     9,    11,
    51,    13,    15,    17,    19,     1,     3,     6,     5,    25,
     9,    11,    24,    13,    15,    17,    19,     1,     3,     6,
     5,    38,     9,    11,    62,    13,    15,    17,    19,     1,
     3,     6,     5,    38,     9,    11,    26,    13,    15,    17,
    19,     1,     3,     6,     5,   nil,     9,    11,   nil,    13,
    15,    17,    19,     1,     3,     6,     5,   nil,     9,    11,
   nil,    13,    15,    17,    19,     1,     3,     6,     5,   nil,
     9,    11,    28,    13,    15,    17,    19,     1,     3,     6,
    28,    56,    27,    49,    38,    48,   nil,    32,    33,    38,
    27,    34,    32,    33,    43,   nil,    34,    32,    33,    32,
    33,    34,   nil,    34,    32,    33,    32,    33,    34,    22,
    34,    32,    33,    21,   nil,    34,    32,    33,   nil,    59,
    34,    58,    64,   nil,    48 ]

racc_action_check = [
     0,    43,     0,     0,    30,     0,     0,     0,     0,     0,
     0,     0,    38,    25,    38,    38,    47,    38,    38,    38,
    38,    38,    38,    38,     5,    11,     5,     5,    34,     5,
     5,     5,     5,     5,     5,     5,    31,    51,    31,    31,
    39,    31,    31,    31,    31,    31,    31,    31,    54,     8,
    54,    54,     6,    54,    54,    54,    54,    54,    54,    54,
    29,    57,    29,    29,    58,    29,    29,    29,    29,    29,
    29,    29,    24,    59,    24,    24,     9,    24,    24,    24,
    24,    24,    24,    24,    48,   nil,    48,    48,   nil,    48,
    48,    48,    48,    48,    48,    48,    21,   nil,    21,    21,
   nil,    21,    21,    21,    21,    21,    21,    21,    22,   nil,
    22,    22,    50,    22,    22,    22,    22,    22,    22,    22,
    10,    50,    50,    36,    23,    36,   nil,    23,    23,    26,
    10,    23,    12,    12,    26,   nil,    12,    46,    46,    44,
    44,    46,   nil,    44,    55,    55,    40,    40,    55,     3,
    40,    37,    37,     3,   nil,    37,    35,    35,   nil,    53,
    35,    53,    60,   nil,    60 ]

racc_action_pointer = [
    -2,   nil,   nil,   130,   nil,    22,    29,   nil,    49,    64,
   114,    12,   115,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    94,   106,   110,    70,    13,   115,   nil,   nil,    58,
   -10,    34,   nil,   nil,    16,   139,   103,   134,    10,    34,
   129,   nil,   nil,   -11,   122,   nil,   120,    -3,    82,   nil,
   106,    34,   nil,   139,    46,   127,   nil,    47,    52,    59,
   142,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -19,   -10,   -22,   -11,   -42,   -30,   -12,   -42,   -42,
    -2,   -42,    -3,   -15,    -6,   -16,    -7,   -17,    -8,   -18,
    -9,   -42,   -27,   -42,   -42,   -42,   -42,   -14,   -13,    -5,
   -42,   -42,   -20,   -21,   -42,   -31,   -42,   -28,   -42,   -39,
   -32,    65,   -33,   -35,    -4,   -38,   -26,   -24,   -42,   -23,
   -42,   -42,   -36,   -42,   -27,   -29,   -41,   -42,   -42,   -42,
   -42,   -40,   -37,   -34,   -25 ]

racc_goto_table = [
    23,    10,    39,    36,     8,    42,    53,   nil,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,    35,    37,   nil,    40,
   nil,   nil,   nil,   nil,    44,   nil,    46,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    60,    61,   nil,    63,    50,
   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,    37 ]

racc_goto_check = [
     3,     2,    14,    13,     1,    14,    15,   nil,   nil,    14,
   nil,   nil,   nil,   nil,   nil,   nil,     3,     3,   nil,     3,
   nil,   nil,   nil,   nil,     3,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    13,    14,   nil,    14,     2,
   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     4,     1,    -5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -19,   -21,   -37 ]

racc_goto_default = [
   nil,   nil,   nil,    12,    29,    14,    16,    18,    20,     2,
     4,     7,    31,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 25, :_reduce_1,
  1, 25, :_reduce_2,
  1, 26, :_reduce_3,
  3, 26, :_reduce_4,
  2, 26, :_reduce_5,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 29, :_reduce_15,
  1, 29, :_reduce_16,
  1, 29, :_reduce_17,
  1, 29, :_reduce_18,
  1, 29, :_reduce_19,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 30, :_reduce_22,
  4, 30, :_reduce_23,
  3, 30, :_reduce_24,
  6, 30, :_reduce_25,
  3, 30, :_reduce_26,
  0, 37, :_reduce_27,
  1, 37, :_reduce_28,
  3, 37, :_reduce_29,
  1, 31, :_reduce_30,
  3, 32, :_reduce_31,
  3, 32, :_reduce_32,
  3, 33, :_reduce_33,
  6, 33, :_reduce_34,
  0, 39, :_reduce_35,
  1, 39, :_reduce_36,
  3, 39, :_reduce_37,
  3, 34, :_reduce_38,
  3, 35, :_reduce_39,
  6, 35, :_reduce_40,
  3, 38, :_reduce_41 ]

racc_reduce_n = 42

racc_shift_n = 65

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :DEF => 4,
  :CLASS => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :INDENT => 14,
  :DEDENT => 15,
  ";" => 16,
  "+" => 17,
  "-" => 18,
  "(" => 19,
  ")" => 20,
  "." => 21,
  "," => 22,
  "=" => 23 }

racc_nt_base = 24

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\";\"",
  "\"+\"",
  "\"-\"",
  "\"(\"",
  "\")\"",
  "\".\"",
  "\",\"",
  "\"=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "BinaryOperator",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_16(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_17(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_18(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_19(val, _values, result)
     result = LiteralNode.new(nil) 
    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_22(val, _values, result)
     result = CallNode.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_23(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_24(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_25(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_26(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_27(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_28(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_29(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_30(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_31(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_32(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_33(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_34(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_35(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_36(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_37(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_38(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_39(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_40(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_41(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
